/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package userInterface;

import java.awt.Image;
import java.io.File;
import java.io.FileNotFoundException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

import applicationLogic.ClearingDonationBox;
import applicationLogic.DiagramCalculation;
import applicationLogic.DonationBox;
import applicationLogic.DonationCollection;
import applicationLogic.ExportToPdf;
import applicationLogic.FixedDonationCollection;
import applicationLogic.PersonHistory;
import applicationLogicAccess.Access;
import applicationLogicAccess.CollectionAccess;
import applicationLogicAccess.PersonHistoryAccess;

import com.itextpdf.text.DocumentException;

/**
 * 
 * @author Timo
 */
public class ManageCollection extends javax.swing.JDialog {
	int collId;
	DonationCollection coll;
	DefaultTableModel boxModel;

	/**
	 * Initializes the Window
	 * 
	 * @param parent
	 *            the parent
	 * @param modal
	 *            determines if the window should be modal or not
	 * @param collId
	 *            the Id of the Collection we want to display in this window
	 */
	public ManageCollection(java.awt.Frame parent, boolean modal, int collId) {
		super(parent, modal);
		this.collId = collId;

		initComponents();
		this.setLocationRelativeTo(null);

		boxModel = (DefaultTableModel) boxTable.getModel();
		refresh();

		txtSum.setText(String.valueOf(coll.getSum())); //added sz
		if (coll.getIsCompleted()) {
			txtStatus.setText("Sammlung beendet");
		} else {
			txtStatus.setText("Sammlung noch nicht abgeschloßen");
		}

		if (coll.getIsCompleted()) {
			btnFinishCollection.setEnabled(false);
			btnClearDonationBox.setEnabled(false);
			btnEditCollection.setEnabled(false);
			btnReport.setToolTipText("");
		}

		if (!coll.getIsCompleted()) {
			btnReport.setEnabled(false);
			btnReport
					.setToolTipText("Diese Funktion steht erst nach dem Abschluss einer Sammlung zur Verfügung!");
		}
		
		//added by sz
		Image imgIcon = new ImageIcon("images/icon.png").getImage();
		setIconImage(imgIcon);
		//
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code"> desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel10 = new javax.swing.JLabel();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		jLabel7 = new javax.swing.JLabel();
		jLabel8 = new javax.swing.JLabel();
		txtClass = new javax.swing.JTextField();
		txtOrgPers = new javax.swing.JTextField();
		txtAddress = new javax.swing.JTextField();
		txtConPers = new javax.swing.JTextField();
		txtBeginn = new javax.swing.JTextField();
		txtEnd = new javax.swing.JTextField();
		txtComment = new javax.swing.JTextField();
		jScrollPane1 = new javax.swing.JScrollPane();
		boxTable = new javax.swing.JTable();
		btnClose = new javax.swing.JButton();
		txtSum = new javax.swing.JFormattedTextField();
		jLabel9 = new javax.swing.JLabel();
		jLabel11 = new javax.swing.JLabel();
		txtStatus = new javax.swing.JTextField();
		ImageIcon imgAuge = new ImageIcon("images/imgAuge.png");
		btnOrgPersHistory = new javax.swing.JButton();
		btnOrgPersHistory.setIcon(imgAuge);
		btnConPersHistory = new javax.swing.JButton();
		btnConPersHistory.setIcon(imgAuge);
		jLabel12 = new javax.swing.JLabel();
		txtId = new javax.swing.JTextField();
		ImageIcon imgGeld = new ImageIcon("images/imgGeld.png");
		btnClearDonationBox = new javax.swing.JButton();
		btnClearDonationBox.setIcon(imgGeld);
		ImageIcon imgPfeil = new ImageIcon("images/imgPfeil.png");
		btnFinishCollection = new javax.swing.JButton();
		btnFinishCollection.setIcon(imgPfeil);
		ImageIcon imgBearbeiten = new ImageIcon("images/imgBearbeiten.png");
		btnEditCollection = new javax.swing.JButton();
		btnEditCollection.setIcon(imgBearbeiten);
		btnBoxHistory = new javax.swing.JButton();
		btnBoxHistory.setIcon(imgAuge);
		ImageIcon imgDiagramm = new ImageIcon("images/imgDiag.png");
		btnShowDiagram = new javax.swing.JButton();
		btnShowDiagram.setIcon(imgDiagramm);
		ImageIcon imgDocument = new ImageIcon("images/imgDocument.png");
		btnReport = new javax.swing.JButton();
		btnReport.setIcon(imgDocument);

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setResizable(false);

		jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
		jLabel10.setText("Spendensammlung Verwalten");

		jLabel1.setText("Zugeordnetes Organisationsmitglied");

		jLabel2.setText("Art der Sammlung");

		jLabel3.setText("Zugeordnete Kontaktperson");

		jLabel4.setText("Adresse (nicht bei Straßensammlung)");

		jLabel5.setText("Beginn der Sammlung");

		jLabel6.setText("Ende der Sammlung");

		jLabel7.setText("Kommentar");

		jLabel8.setText("Zugeordnete Dosen");

		txtClass.setEditable(false);

		txtOrgPers.setEditable(false);

		txtAddress.setEditable(false);

		txtConPers.setEditable(false);

		txtBeginn.setEditable(false);

		txtEnd.setEditable(false);

		txtComment.setEditable(false);

		boxTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] {

				}, new String[] { "ID", "Status", "Bisher gesammeltes Geld",
						"Verantwortliche Person", "Kommentar" }) {
			Class[] types = new Class[] { java.lang.Integer.class,
					java.lang.String.class, java.lang.String.class,
					java.lang.String.class, java.lang.String.class };
			boolean[] canEdit = new boolean[] { false, false, false, false,
					false };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		jScrollPane1.setViewportView(boxTable);
		if (boxTable.getColumnModel().getColumnCount() > 0) {
			boxTable.getColumnModel().getColumn(0).setMinWidth(30);
			boxTable.getColumnModel().getColumn(0).setPreferredWidth(30);
			boxTable.getColumnModel().getColumn(0).setMaxWidth(30);
			boxTable.getColumnModel().getColumn(1).setMinWidth(60);
			boxTable.getColumnModel().getColumn(1).setPreferredWidth(60);
			boxTable.getColumnModel().getColumn(1).setMaxWidth(60);
			boxTable.getColumnModel().getColumn(2).setMinWidth(160);
			boxTable.getColumnModel().getColumn(2).setPreferredWidth(160);
			boxTable.getColumnModel().getColumn(2).setMaxWidth(160);
		}

		btnClose.setText("Fenster schließen");
		btnClose.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnCloseActionPerformed(evt);
			}
		});

		txtSum.setEditable(false);
		txtSum.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
				new javax.swing.text.NumberFormatter(java.text.NumberFormat
						.getCurrencyInstance())));

		jLabel9.setText("Gesamtbetrag");

		jLabel11.setText("Status der Sammlung");

		txtStatus.setEditable(false);

		btnOrgPersHistory.setText("Historie");
		btnOrgPersHistory
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						btnOrgPersHistoryActionPerformed(evt);
					}
				});

		btnConPersHistory.setText("Historie");
		btnConPersHistory
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						btnConPersHistoryActionPerformed(evt);
					}
				});

		jLabel12.setText("ID");

		txtId.setEditable(false);

		btnClearDonationBox.setText("Dose leeren");
		btnClearDonationBox
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						btnClearDonationBoxActionPerformed(evt);
					}
				});

		btnFinishCollection.setText("Sammlung abschließen");
		btnFinishCollection
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						btnFinishCollectionActionPerformed(evt);
					}
				});

		btnEditCollection.setText("Sammlung Bearbeiten");
		btnEditCollection
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						btnEditCollectionActionPerformed(evt);
					}
				});

		btnBoxHistory.setText("Historie");
		btnBoxHistory.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnBoxHistoryActionPerformed(evt);
			}
		});

		btnShowDiagram.setText("Diagramm anzeigen");
		btnShowDiagram.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnShowDiagramActionPerformed(evt);
			}
		});

		btnReport.setText("Report speichern");
		btnReport.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnReportActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addGap(52, 52, 52)
								.addComponent(btnEditCollection,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										180,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(22, 22, 22)
								.addComponent(btnClearDonationBox,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										117,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(22, 22, 22)
								.addComponent(btnFinishCollection,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										180,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(52, 52, 52))
				.addGroup(
						layout.createSequentialGroup()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addGap(44, 44,
																		44)
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(
																						jScrollPane1,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						537,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addGroup(
																						layout.createSequentialGroup()
																								.addGroup(
																										layout.createParallelGroup(
																												javax.swing.GroupLayout.Alignment.LEADING)
																												.addComponent(
																														jLabel2)
																												.addComponent(
																														jLabel1)
																												.addComponent(
																														jLabel3)
																												.addComponent(
																														jLabel4)
																												.addComponent(
																														jLabel5)
																												.addComponent(
																														jLabel6)
																												.addComponent(
																														jLabel7)
																												.addComponent(
																														jLabel9)
																												.addComponent(
																														jLabel11)
																												.addComponent(
																														jLabel12)
																												.addComponent(
																														jLabel8))
																								.addGap(29,
																										29,
																										29)
																								.addGroup(
																										layout.createParallelGroup(
																												javax.swing.GroupLayout.Alignment.LEADING)
																												.addComponent(
																														btnBoxHistory)
																												.addGroup(
																														layout.createParallelGroup(
																																javax.swing.GroupLayout.Alignment.LEADING,
																																false)
																																.addComponent(
																																		txtSum)
																																.addComponent(
																																		txtComment,
																																		javax.swing.GroupLayout.DEFAULT_SIZE,
																																		299,
																																		Short.MAX_VALUE)
																																.addComponent(
																																		txtEnd)
																																.addComponent(
																																		txtBeginn)
																																.addComponent(
																																		txtAddress)
																																.addComponent(
																																		txtClass)
																																.addComponent(
																																		txtStatus)
																																.addGroup(
																																		layout.createSequentialGroup()
																																				.addGroup(
																																						layout.createParallelGroup(
																																								javax.swing.GroupLayout.Alignment.LEADING)
																																								.addComponent(
																																										txtOrgPers)
																																								.addComponent(
																																										txtConPers))
																																				.addPreferredGap(
																																						javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																																				.addGroup(
																																						layout.createParallelGroup(
																																								javax.swing.GroupLayout.Alignment.LEADING)
																																								.addComponent(
																																										btnOrgPersHistory,
																																										javax.swing.GroupLayout.Alignment.TRAILING)
																																								.addComponent(
																																										btnConPersHistory,
																																										javax.swing.GroupLayout.Alignment.TRAILING)))
																																.addComponent(
																																		txtId))))))
												.addGroup(
														layout.createSequentialGroup()
																.addGap(209,
																		209,
																		209)
																.addComponent(
																		jLabel10))
												.addGroup(
														layout.createSequentialGroup()
																.addGap(241,
																		241,
																		241)
																.addComponent(
																		btnClose,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		141,
																		javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addContainerGap(
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE))
				.addGroup(
						layout.createSequentialGroup()
								.addGap(130, 130, 130)
								.addComponent(btnShowDiagram,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										160,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.addComponent(btnReport,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										160,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(130, 130, 130)));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jLabel10)
								.addGap(20, 20, 20)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel12)
												.addComponent(
														txtId,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel2)
												.addComponent(
														txtClass,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel1)
												.addComponent(
														txtOrgPers,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(btnOrgPersHistory))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel3)
												.addComponent(
														txtConPers,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(btnConPersHistory))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel4)
												.addComponent(
														txtAddress,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel5)
												.addComponent(
														txtBeginn,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel6)
												.addComponent(
														txtEnd,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel7)
												.addComponent(
														txtComment,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel9)
												.addComponent(
														txtSum,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel11)
												.addComponent(
														txtStatus,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel8)
												.addComponent(btnBoxHistory))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										150,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(
														btnClearDonationBox)
												.addComponent(
														btnFinishCollection)
												.addComponent(btnEditCollection))
								.addGap(18, 18, 18)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(btnShowDiagram)
												.addComponent(btnReport))
								.addGap(18, 18, 18).addComponent(btnClose)
								.addContainerGap(15, Short.MAX_VALUE)));

		pack();
	}//</editor-fold>//GEN-END:initComponents

	private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
		dispose();
	}//GEN-LAST:event_btnCloseActionPerformed

	private void btnFinishCollectionActionPerformed(
			java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishCollectionActionPerformed
		int n = JOptionPane
				.showConfirmDialog(
						null,
						"Sind sie sicher, dass sie diese Sammlung abschließen"
								+ " möchten?\n\nDurch das abschließen der Sammlung werden die zugeordneten"
								+ " Dosen für andere Sammlungen freigegeben.\n\n\nStellen Sie sicher, dass "
								+ "alle Dosen vor dem abschließen der Leerung mit Hilfe des \"Dose Leeren\" "
								+ "Buttons geleert wurden!",
						"Sammlung abschließen", JOptionPane.OK_CANCEL_OPTION);
		if (n == 0) {
			// Sammlung abschließen
			try {
				CollectionAccess.finishCollection(coll.getCollectionId());
			} catch (SQLException ex) {
				JOptionPane.showMessageDialog(null, "Datenbankfehler!",
						"Fehler!", JOptionPane.ERROR_MESSAGE);
			} catch (ParseException ex) {
				JOptionPane.showMessageDialog(null, "Datenbankfehler!",
						"Fehler!", JOptionPane.ERROR_MESSAGE);
			}

			// Sammlung als Pdf speichern?            
			int save = JOptionPane
					.showConfirmDialog(
							null,
							"Möchten sie einen Sammlungsreport als PDF Dokument speichern?",
							"Report speichern", JOptionPane.YES_NO_OPTION);
			if (save == JOptionPane.YES_OPTION) {
				JFileChooserConfirmationPdf fc = new JFileChooserConfirmationPdf();
				FileNameExtensionFilter plainFilter = new FileNameExtensionFilter(
						"Pdf Dateien (.pdf)", "pdf", "PDF", "Pdf");
				fc.setFileFilter(plainFilter);
				fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
				String home = System.getProperty("user.home");
				home = home.trim();
				fc.setSelectedFile(new File(home + "/Sammlungs_Report_ID_"
						+ coll.getCollectionId()));
				int result = fc.showSaveDialog(this);
				if (result == JFileChooserConfirmationPdf.APPROVE_OPTION) {
					File file = fc.getSelectedFile();
					if (!file.getAbsolutePath().endsWith(".pdf")) {
						file = new File(file.getAbsolutePath() + ".pdf");
					}
					String path = file.getAbsolutePath();
					if (plainFilter.accept(file)) {
						try {
							ExportToPdf.exportFinishCollection(coll, path);
						} catch (FileNotFoundException | DocumentException ex) {
							JOptionPane
									.showMessageDialog(
											null,
											"Beim Speichern ist ein Fehler aufgetreten, bitte versuchen sie es erneut!",
											"Fehler!",
											JOptionPane.ERROR_MESSAGE);
						}
					}
				}
			}
		}
		if (coll.getIsCompleted()) {
			btnReport.setEnabled(true);
		}
		refresh();
	}//GEN-LAST:event_btnFinishCollectionActionPerformed

	private void btnOrgPersHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrgPersHistoryActionPerformed
		ArrayList<PersonHistory> list = PersonHistoryAccess
				.searchOrgaCollectionHistoriesByCollectionId(collId);
		System.out.println("" + list.size());
		HistoryPerson mainFrame = new HistoryPerson(null, true, list);
		mainFrame.setVisible(true);
	}//GEN-LAST:event_btnOrgPersHistoryActionPerformed

	private void btnConPersHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConPersHistoryActionPerformed
		ArrayList<PersonHistory> list = new ArrayList<PersonHistory>(
				PersonHistoryAccess
						.searchContactHistoriesByCollectionId(collId));
		HistoryPerson mainFrame = new HistoryPerson(null, true, list);
		mainFrame.setVisible(true);
	}//GEN-LAST:event_btnConPersHistoryActionPerformed

	private void btnEditCollectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditCollectionActionPerformed
		EditCollection mainFrame = new EditCollection(null, true, collId);
		mainFrame.setVisible(true);
		refresh();
	}//GEN-LAST:event_btnEditCollectionActionPerformed

	private void btnBoxHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoxHistoryActionPerformed
		HistoryBox mainFrame = new HistoryBox(null, true, collId);
		mainFrame.setVisible(true);
	}//GEN-LAST:event_btnBoxHistoryActionPerformed

	private void btnShowDiagramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowDiagramActionPerformed
		JPanel diagram = DiagramCalculation.printCollectionDiagram(collId);
		DisplayDiagram mainFrame = new DisplayDiagram(null, true, diagram,
				DisplayDiagram.COLLECTION_DIAGRAM, collId);
		mainFrame.setVisible(true);
	}//GEN-LAST:event_btnShowDiagramActionPerformed

	private void btnClearDonationBoxActionPerformed(
			java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearDonationBoxActionPerformed
		try {
			int n = boxTable.getSelectedRow();
			int selected = (int) boxTable.getValueAt(boxTable.getSelectedRow(),
					0);
			if (n == -1) {
				JOptionPane
						.showMessageDialog(
								null,
								"Keine Spendenbox ausgewählt!\n\nBitte wählen sie vor Betätigen des Knopfes eine Spendenbox aus.",
								"Fehler!", JOptionPane.ERROR_MESSAGE);
			} else if (!Access.getDonationBoxById(selected).isInUse()) {
				JOptionPane.showMessageDialog(null,
						"Spendendose nicht in Benutzung!", "Fehler!",
						JOptionPane.ERROR_MESSAGE);
			} else if (Access.getDonationBoxById(selected).getIsDeleted()) {
				JOptionPane.showMessageDialog(null,
						"Spendendose bereits gelöscht!", "Fehler!",
						JOptionPane.ERROR_MESSAGE);
			} else {
				int boxId = (int) boxTable.getValueAt(n, 0);
				ClearDonationBox mainFrame = new ClearDonationBox(null, true,
						boxId);
				mainFrame.setVisible(true);
			}

		} catch (ArrayIndexOutOfBoundsException x) {
			JOptionPane
					.showMessageDialog(
							null,
							"Keine Spendenbox ausgewählt!\n\nBitte wählen sie vor Betätigen des Knopfes eine Spendendose aus.",
							"Fehler!", JOptionPane.ERROR_MESSAGE);

		}
		refresh();

	}//GEN-LAST:event_btnClearDonationBoxActionPerformed

	private void btnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportActionPerformed
		JFileChooserConfirmationPdf fc = new JFileChooserConfirmationPdf();
		FileNameExtensionFilter plainFilter = new FileNameExtensionFilter(
				"Pdf Dateien (.pdf)", "pdf", "PDF", "Pdf");
		fc.setFileFilter(plainFilter);
		fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
		String home = System.getProperty("user.home");
		home = home.trim();
		fc.setSelectedFile(new File(home + "/Sammlungs_Report_ID_"
				+ coll.getCollectionId()));
		int result = fc.showSaveDialog(this);
		if (result == JFileChooserConfirmationPdf.APPROVE_OPTION) {
			File file = fc.getSelectedFile();
			if (!file.getAbsolutePath().endsWith(".pdf")) {
				file = new File(file.getAbsolutePath() + ".pdf");
			}
			String path = file.getAbsolutePath();
			if (plainFilter.accept(file)) {
				try {
					ExportToPdf.exportFinishCollection(coll, path);
				} catch (FileNotFoundException | DocumentException ex) {
					JOptionPane
							.showMessageDialog(
									null,
									"Beim Speichern ist ein Fehler aufgetreten, bitte versuchen sie es erneut!",
									"Fehler!", JOptionPane.ERROR_MESSAGE);
				}
			}
		}
	}//GEN-LAST:event_btnReportActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger
					.getLogger(ManageCollection.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger
					.getLogger(ManageCollection.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger
					.getLogger(ManageCollection.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger
					.getLogger(ManageCollection.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTable boxTable;
	private javax.swing.JButton btnBoxHistory;
	private javax.swing.JButton btnClearDonationBox;
	private javax.swing.JButton btnClose;
	private javax.swing.JButton btnConPersHistory;
	private javax.swing.JButton btnEditCollection;
	private javax.swing.JButton btnFinishCollection;
	private javax.swing.JButton btnOrgPersHistory;
	private javax.swing.JButton btnReport;
	private javax.swing.JButton btnShowDiagram;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel10;
	private javax.swing.JLabel jLabel11;
	private javax.swing.JLabel jLabel12;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextField txtAddress;
	private javax.swing.JTextField txtBeginn;
	private javax.swing.JTextField txtClass;
	private javax.swing.JTextField txtComment;
	private javax.swing.JTextField txtConPers;
	private javax.swing.JTextField txtEnd;
	private javax.swing.JTextField txtId;
	private javax.swing.JTextField txtOrgPers;
	private javax.swing.JTextField txtStatus;
	private javax.swing.JFormattedTextField txtSum;

	// End of variables declaration//GEN-END:variables

	private void refresh() {

		System.out.println(">>" + Access.getAccessLevelOfProgramm());
		if (Access.getAccessLevelOfProgramm() == 1) { // admin

			boolean state = true;
			btnClearDonationBox.setEnabled(state);
			btnEditCollection.setEnabled(state);
			btnFinishCollection.setEnabled(state);

		}
		if (Access.getAccessLevelOfProgramm() == 2) { // member

			boolean state = true;
			btnClearDonationBox.setEnabled(state);
			btnEditCollection.setEnabled(state);
			btnFinishCollection.setEnabled(state);

		}
		if (Access.getAccessLevelOfProgramm() == 3) { // guest

			boolean state = false;
			btnClearDonationBox.setEnabled(state);
			btnEditCollection.setEnabled(state);
			btnFinishCollection.setEnabled(state);

		}

		try {
			for (DonationCollection curr : CollectionAccess
					.getAllDonationCollections()) {
				if (curr.getCollectionId() == collId) {
					coll = curr;
					break;
				}
			}
		} catch (SQLException ex) {
			JOptionPane.showMessageDialog(null, "Datenbankfehler!", "Fehler!",
					JOptionPane.ERROR_MESSAGE);
		} catch (ParseException ex) {
			JOptionPane.showMessageDialog(null, "Datenbankfehler!", "Fehler!",
					JOptionPane.ERROR_MESSAGE);
		}

		txtId.setText("" + coll.getCollectionId());
		if (coll.getClass().getSimpleName().equals("StreetDonationCollection")) {
			txtClass.setText("Straßensammlung");
			txtConPers.setEnabled(false);
			txtAddress.setEnabled(false);
			btnConPersHistory.setEnabled(false);
		} else {
			FixedDonationCollection fixed = (FixedDonationCollection) coll;
			txtClass.setText("Feste Sammlung");
			txtConPers.setText(fixed.getContactPerson().getPersonId() + ",  "
					+ fixed.getContactPerson().getLastName() + ", "
					+ fixed.getContactPerson().getForename());
			txtAddress.setText(fixed.getFixedAddress().toStringTable());
		}
		SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
		if (coll.getBeginPeriode() != null) {
			txtBeginn.setText(sdf.format(coll.getBeginPeriode().getTime()));
		} else {
			txtBeginn.setText("-");
		}
		if (coll.getEndPeriode() != null) {
			txtEnd.setText(sdf.format(coll.getEndPeriode().getTime()));
		} else {
			txtEnd.setText("-");
		}
		txtOrgPers.setText(coll.getOrganizationPerson().getPersonId() + ",  "
				+ coll.getOrganizationPerson().getLastName() + ", "
				+ coll.getOrganizationPerson().getForename());
		txtComment.setText(coll.getComment());

		ArrayList<DonationBox> list = coll.getDonationboxes();
		boxModel.setRowCount(0);

		for (DonationBox currBox : list) {
			String status;
			if (currBox.getIsDeleted()) {
				status = "gelöscht";
			} else {
				status = currBox.getInUseForTable();
			}
			float boxSum = 0.00f;
			for (ClearingDonationBox currClear : currBox
					.getClearingDonationBoxes()) {
				boxSum += currClear.getSum();
			}
			boxModel.insertRow(
					boxModel.getRowCount(),
					new Object[] {
							currBox.getBoxId(),
							status,
							boxSum,
							currBox.getCurrentResponsiblePerson().getLastName()
									+ ", "
									+ currBox.getCurrentResponsiblePerson()
											.getForename(),
							currBox.getComment() });
		}

	}
}
